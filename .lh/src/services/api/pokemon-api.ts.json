{
    "sourceFile": "src/services/api/pokemon-api.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743561693421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743561702207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,93 +1,49 @@\n import { Pokemon, PokemonListItem, PokemonListResponse } from '@/types/pokemon';\n \n-// 포켓몬 타입 정의\n-export interface Pokemon {\n-    id: number;\n-    name: string;\n-    types: {\n-      type: {\n-        name: string;\n-      };\n-    }[];\n-    sprites: {\n-      other: {\n-        'official-artwork': {\n-          front_default: string;\n-        };\n-      };\n-    };\n-    stats: {\n-      base_stat: number;\n-      stat: {\n-        name: string;\n-      };\n-    }[];\n-    abilities: {\n-      ability: {\n-        name: string;\n-      };\n-      is_hidden: boolean;\n-    }[];\n-  }\n+// 캐시 객체\n+const cache: Record<string, unknown> = {};\n+\n+// 모든 포켓몬 목록 가져오기\n+export async function getAllPokemon(limit = 1000): Promise<PokemonListItem[]> {\n+  const cacheKey = `pokemon-list-${limit}`;\n   \n-  // 포켓몬 리스트 아이템 타입\n-  export interface PokemonListItem {\n-    name: string;\n-    url: string;\n+  if (cache[cacheKey]) {\n+    return cache[cacheKey] as PokemonListItem[];\n   }\n   \n-  // 포켓몬 리스트 응답 타입\n-  export interface PokemonListResponse {\n-    count: number;\n-    next: string | null;\n-    previous: string | null;\n-    results: PokemonListItem[];\n-  }\n+  const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}`);\n+  const data: PokemonListResponse = await response.json();\n   \n-  // 캐시 객체\n-  const cache: Record<string, unknown> = {};\n+  cache[cacheKey] = data.results;\n+  return data.results;\n+}\n+\n+// 포켓몬 상세 정보 가져오기\n+export async function getPokemonDetails(idOrName: string | number): Promise<Pokemon> {\n+  const cacheKey = `pokemon-${idOrName}`;\n   \n-  // 모든 포켓몬 목록 가져오기\n-  export async function getAllPokemon(limit = 1000): Promise<PokemonListItem[]> {\n-    const cacheKey = `pokemon-list-${limit}`;\n-    \n-    if (cache[cacheKey]) {\n-      return cache[cacheKey] as PokemonListItem[];\n-    }\n-    \n-    const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}`);\n-    const data: PokemonListResponse = await response.json();\n-    \n-    cache[cacheKey] = data.results;\n-    return data.results;\n+  if (cache[cacheKey]) {\n+    return cache[cacheKey] as Pokemon;\n   }\n   \n-  // 포켓몬 상세 정보 가져오기\n-  export async function getPokemonDetails(idOrName: string | number): Promise<Pokemon> {\n-    const cacheKey = `pokemon-${idOrName}`;\n-    \n-    if (cache[cacheKey]) {\n-      return cache[cacheKey] as Pokemon;\n-    }\n-    \n-    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${idOrName}`);\n-    const data: Pokemon = await response.json();\n\\ No newline at end of file\n-    \n-    cache[cacheKey] = data;\n-    return data;\n+  const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${idOrName}`);\n+  const data: Pokemon = await response.json();\n+  \n+  cache[cacheKey] = data;\n+  return data;\n+}\n+\n+// 타입 유효성 데이터 가져오기\n+export async function getTypeEffectiveness(type: string) {\n+  const cacheKey = `type-${type}`;\n+  \n+  if (cache[cacheKey]) {\n+    return cache[cacheKey];\n   }\n   \n-  // 타입 유효성 데이터 가져오기\n-  export async function getTypeEffectiveness(type: string) {\n-    const cacheKey = `type-${type}`;\n-    \n-    if (cache[cacheKey]) {\n-      return cache[cacheKey];\n-    }\n-    \n-    const response = await fetch(`https://pokeapi.co/api/v2/type/${type}`);\n-    const data = await response.json();\n-    \n-    cache[cacheKey] = data;\n-    return data;\n-  }\n+  const response = await fetch(`https://pokeapi.co/api/v2/type/${type}`);\n+  const data = await response.json();\n+  \n+  cache[cacheKey] = data;\n+  return data;\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1743561693421,
            "name": "Commit-0",
            "content": "import { Pokemon, PokemonListItem, PokemonListResponse } from '@/types/pokemon';\n\n// 포켓몬 타입 정의\nexport interface Pokemon {\n    id: number;\n    name: string;\n    types: {\n      type: {\n        name: string;\n      };\n    }[];\n    sprites: {\n      other: {\n        'official-artwork': {\n          front_default: string;\n        };\n      };\n    };\n    stats: {\n      base_stat: number;\n      stat: {\n        name: string;\n      };\n    }[];\n    abilities: {\n      ability: {\n        name: string;\n      };\n      is_hidden: boolean;\n    }[];\n  }\n  \n  // 포켓몬 리스트 아이템 타입\n  export interface PokemonListItem {\n    name: string;\n    url: string;\n  }\n  \n  // 포켓몬 리스트 응답 타입\n  export interface PokemonListResponse {\n    count: number;\n    next: string | null;\n    previous: string | null;\n    results: PokemonListItem[];\n  }\n  \n  // 캐시 객체\n  const cache: Record<string, unknown> = {};\n  \n  // 모든 포켓몬 목록 가져오기\n  export async function getAllPokemon(limit = 1000): Promise<PokemonListItem[]> {\n    const cacheKey = `pokemon-list-${limit}`;\n    \n    if (cache[cacheKey]) {\n      return cache[cacheKey] as PokemonListItem[];\n    }\n    \n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}`);\n    const data: PokemonListResponse = await response.json();\n    \n    cache[cacheKey] = data.results;\n    return data.results;\n  }\n  \n  // 포켓몬 상세 정보 가져오기\n  export async function getPokemonDetails(idOrName: string | number): Promise<Pokemon> {\n    const cacheKey = `pokemon-${idOrName}`;\n    \n    if (cache[cacheKey]) {\n      return cache[cacheKey] as Pokemon;\n    }\n    \n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${idOrName}`);\n    const data: Pokemon = await response.json();\n    \n    cache[cacheKey] = data;\n    return data;\n  }\n  \n  // 타입 유효성 데이터 가져오기\n  export async function getTypeEffectiveness(type: string) {\n    const cacheKey = `type-${type}`;\n    \n    if (cache[cacheKey]) {\n      return cache[cacheKey];\n    }\n    \n    const response = await fetch(`https://pokeapi.co/api/v2/type/${type}`);\n    const data = await response.json();\n    \n    cache[cacheKey] = data;\n    return data;\n  }"
        }
    ]
}