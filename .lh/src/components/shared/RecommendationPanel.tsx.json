{
    "sourceFile": "src/components/shared/RecommendationPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1743561836119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743562313275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n // app/team-builder/components/RecommendationPanel.tsx\n 'use client';\n \n+import { useEffect, useState } from 'react';\n+\n import { Pokemon } from '@/types/pokemon';\n-import PokemonTypeChips from '@/app/pokedex/[id]/components/PokemonTypeChips';\n+import PokemonTypeChips from '@/components/shared/PokemonTypeChips';\n import { getPokemonDetails } from '@/services/api/pokemon-api';\n import { supabase } from '@/lib/supabase';\n-import { useState } from 'react';\n \n interface RecommendationPanelProps {\n   selectedPokemon: Pokemon[];\n }\n@@ -22,8 +23,14 @@\n   const [recommendations, setRecommendations] = useState<RecommendedPokemon[]>([]);\n   const [loading, setLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n   \n+  useEffect(() => {\n+    if (selectedPokemon.length >= 2 && selectedPokemon.length <= 3) {\n+      requestRecommendations();\n+    }\n+  }, [selectedPokemon]);\n+  \n   // 팀 추천 요청\n   const requestRecommendations = async () => {\n     setLoading(true);\n     setError(null);\n"
                },
                {
                    "date": 1743562425349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { useEffect, useState } from 'react';\n \n import { Pokemon } from '@/types/pokemon';\n import PokemonTypeChips from '@/components/shared/PokemonTypeChips';\n-import { getPokemonDetails } from '@/services/api/pokemon-api';\n+import { getPokemonDetails } from '@/lib/pokemon-api';\n import { supabase } from '@/lib/supabase';\n \n interface RecommendationPanelProps {\n   selectedPokemon: Pokemon[];\n"
                }
            ],
            "date": 1743561836119,
            "name": "Commit-0",
            "content": "// app/team-builder/components/RecommendationPanel.tsx\n'use client';\n\nimport { Pokemon } from '@/types/pokemon';\nimport PokemonTypeChips from '@/app/pokedex/[id]/components/PokemonTypeChips';\nimport { getPokemonDetails } from '@/services/api/pokemon-api';\nimport { supabase } from '@/lib/supabase';\nimport { useState } from 'react';\n\ninterface RecommendationPanelProps {\n  selectedPokemon: Pokemon[];\n}\n\ninterface RecommendedPokemon {\n  pokemon: Pokemon;\n  reasons: string[];\n}\n\nexport default function RecommendationPanel({ \n  selectedPokemon \n}: RecommendationPanelProps) {\n  const [recommendations, setRecommendations] = useState<RecommendedPokemon[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // 팀 추천 요청\n  const requestRecommendations = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // API 엔드포인트 호출\n      const response = await fetch('/api/recommend-pokemon', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          selectedPokemon: selectedPokemon.map(p => ({\n            id: p.id,\n            name: p.name,\n            types: p.types.map(t => t.type.name),\n            stats: p.stats.map(s => ({\n              name: s.stat.name,\n              value: s.base_stat\n            })),\n            abilities: p.abilities.map(a => a.ability.name)\n          }))\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('추천을 가져오는데 실패했습니다');\n      }\n      \n      const data = await response.json();\n      \n      // 추천 포켓몬 상세 정보 가져오기\n      const recommendedPokemonDetails = await Promise.all(\n        data.recommendations.map(async (rec: any) => {\n          const pokemon = await getPokemonDetails(rec.id);\n          return {\n            pokemon,\n            reasons: rec.reasons\n          };\n        })\n      );\n      \n      setRecommendations(recommendedPokemonDetails);\n    } catch (error: any) {\n      console.error('Error fetching recommendations:', error);\n      setError(error.message || '추천을 받는 중 오류가 발생했습니다');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // 팀 저장 함수\n  const saveTeam = async (recommendedPokemon: Pokemon[]) => {\n    try {\n      // 사용자 로그인 확인\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        alert('팀을 저장하려면 로그인이 필요합니다');\n        return;\n      }\n      \n      // 새 팀 생성\n      const { data: team, error: teamError } = await supabase\n        .from('teams')\n        .insert({\n          name: '내 팀',\n          user_id: user.id\n        })\n        .select()\n        .single();\n      \n      if (teamError) throw teamError;\n      \n      // 선택한 포켓몬과 추천 포켓몬 합치기\n      const allPokemon = [...selectedPokemon, ...recommendedPokemon];\n      \n      // 팀 포켓몬 추가\n      const pokemonInserts = allPokemon.map((pokemon, index) => ({\n        team_id: team.id,\n        pokemon_id: pokemon.id,\n        slot: index + 1\n      }));\n      \n      const { error: pokemonError } = await supabase\n        .from('team_pokemon')\n        .insert(pokemonInserts);\n      \n      if (pokemonError) throw pokemonError;\n      \n      alert('팀이 성공적으로 저장되었습니다!');\n    } catch (error) {\n      console.error('Error saving team:', error);\n      alert('팀 저장 중 오류가 발생했습니다');\n    }\n  };\n  \n  // 아직 추천 요청하지 않았을 때\n  if (recommendations.length === 0 && !loading && !error) {\n    return (\n      <div className=\"bg-white rounded-lg shadow border p-6 text-center\">\n        <h2 className=\"text-xl font-semibold mb-4\">팀 추천</h2>\n        <p className=\"mb-4\">\n          선택한 포켓몬을 기반으로 최적의 팀 구성을 추천해 드립니다.\n          타입 상성, 특성, 스탯 밸런스를 고려합니다.\n        </p>\n        <button\n          onClick={requestRecommendations}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white py-2 px-6 rounded-lg\"\n        >\n          추천 받기\n        </button>\n      </div>\n    );\n  }\n  \n  // 로딩 중\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-lg shadow border p-6 text-center\">\n        <h2 className=\"text-xl font-semibold mb-4\">팀 분석 중...</h2>\n        <div className=\"flex justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n        </div>\n        <p className=\"mt-4\">최적의 팀 구성을 찾고 있습니다...</p>\n      </div>\n    );\n  }\n  \n  // 에러 발생\n  if (error) {\n    return (\n      <div className=\"bg-white rounded-lg shadow border p-6 text-center\">\n        <h2 className=\"text-xl font-semibold mb-4 text-red-600\">오류 발생</h2>\n        <p className=\"mb-4\">{error}</p>\n        <button\n          onClick={requestRecommendations}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white py-2 px-6 rounded-lg\"\n        >\n          다시 시도\n        </button>\n      </div>\n    );\n  }\n  \n  // 추천 결과 표시\n  return (\n    <div className=\"bg-white rounded-lg shadow border p-6\">\n      <h2 className=\"text-xl font-semibold mb-4\">추천 포켓몬</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {recommendations.slice(0, 3).map(({ pokemon, reasons }) => (\n          <div key={pokemon.id} className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"flex flex-col items-center mb-4\">\n              <img\n                src={pokemon.sprites.other['official-artwork'].front_default}\n                alt={pokemon.name}\n                className=\"w-32 h-32 object-contain\"\n              />\n              <h3 className=\"font-semibold capitalize text-lg mt-2\">\n                {pokemon.name}\n              </h3>\n              <div className=\"mt-2\">\n                <PokemonTypeChips types={pokemon.types.map(t => t.type.name)} />\n              </div>\n            </div>\n            \n            <div className=\"mt-4\">\n              <h4 className=\"font-medium text-gray-700 mb-2\">추천 이유:</h4>\n              <ul className=\"text-sm space-y-1\">\n                {reasons.map((reason, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <span className=\"text-green-600 mr-2\">✓</span>\n                    {reason}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"mt-8 flex justify-center\">\n        <button\n          onClick={() => saveTeam(recommendations.slice(0, 3).map(r => r.pokemon))}\n          className=\"bg-green-600 hover:bg-green-700 text-white py-2 px-6 rounded-lg mr-4\"\n        >\n          이 팀 저장하기\n        </button>\n        \n        <button\n          onClick={requestRecommendations}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white py-2 px-6 rounded-lg\"\n        >\n          다른 추천 받기\n        </button>\n      </div>\n    </div>\n  );\n}"
        }
    ]
}