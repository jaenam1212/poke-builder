{
    "sourceFile": "src/components/shared/TeamBuilder.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1743561804810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743562109741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+// app/team-builder/components/TeamBuilder.tsx\n+'use client';\n+\n+import { Pokemon, PokemonListItem } from '@/types/pokemon';\n+import { useEffect, useState } from 'react';\n+\n+import PokemonSelector from './PokemonSelector';\n+import RecommendationPanel from './RecommendationPanel';\n+import TeamDisplay from './TeamDisplay';\n+import { getPokemonDetails } from '@/services/api/pokemon-api';\n+\n+interface TeamBuilderProps {\n+  pokemonList: PokemonListItem[];\n+  initialPokemon?: Pokemon;\n+}\n+\n+export default function TeamBuilder({ \n+  pokemonList,\n+  initialPokemon\n+}: TeamBuilderProps) {\n+  // 선택된 포켓몬 (최대 6마리)\n+  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon[]>([]);\n+  \n+  // 초기 포켓몬이 제공되면 팀에 추가\n+  useEffect(() => {\n+    if (initialPokemon && !selectedPokemon.find(p => p.id === initialPokemon.id)) {\n+      setSelectedPokemon(prev => [...prev, initialPokemon]);\n+    }\n+  }, [initialPokemon, selectedPokemon]);\n+  \n+  // 포켓몬 추가\n+  const addPokemon = async (pokemon: PokemonListItem) => {\n+    if (selectedPokemon.length >= 6) return;\n+    \n+    try {\n+      // URL에서 ID 추출\n+      const url = pokemon.url;\n+      const parts = url.split('/');\n+      const id = parts[parts.length - 2];\n+      \n+      // 이미 선택된 포켓몬인지 확인\n+      if (selectedPokemon.find(p => p.id.toString() === id)) return;\n+      \n+      // 포켓몬 상세 정보 가져오기\n+      const details = await getPokemonDetails(id);\n+      setSelectedPokemon(prev => [...prev, details]);\n+    } catch (error) {\n+      console.error('Failed to add Pokemon:', error);\n+    }\n+  };\n+  \n+  // 포켓몬 제거\n+  const removePokemon = (id: number) => {\n+    setSelectedPokemon(prev => prev.filter(p => p.id !== id));\n+  };\n+  \n+  // 추천 요청 가능 여부 확인\n+  const canRequestRecommendations = selectedPokemon.length >= 2 && selectedPokemon.length <= 3;\n+  \n+  return (\n+    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n+      <div>\n+        <h2 className=\"text-xl font-semibold mb-4\">나의 포켓몬 팀</h2>\n+        <TeamDisplay \n+          team={selectedPokemon} \n+          onRemove={removePokemon} \n+        />\n+        \n+        {canRequestRecommendations && (\n+          <button\n+            className=\"mt-4 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded w-full\"\n+          >\n+            팀 추천 받기\n+          </button>\n+        )}\n+      </div>\n+      \n+      <div>\n+        <h2 className=\"text-xl font-semibold mb-4\">포켓몬 선택</h2>\n+        <PokemonSelector \n+          pokemonList={pokemonList} \n+          onSelect={addPokemon} \n+          disabled={selectedPokemon.length >= 6}\n+        />\n+      </div>\n+      \n+      {/* 추천 패널 (구현 예정) */}\n+      {canRequestRecommendations && (\n+        <div className=\"col-span-1 md:col-span-2 mt-6\">\n+          <RecommendationPanel \n+            selectedPokemon={selectedPokemon}\n+          />\n+        </div>\n+      )}\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743562115476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,102 +93,5 @@\n         </div>\n       )}\n     </div>\n   );\n-}\n-// app/team-builder/components/TeamBuilder.tsx\n-'use client';\n-\n-import { Pokemon, PokemonListItem } from '@/types/pokemon';\n-import { useEffect, useState } from 'react';\n-\n-import PokemonSelector from './PokemonSelector';\n-import RecommendationPanel from './RecommendationPanel';\n-import TeamDisplay from './TeamDisplay';\n-import { getPokemonDetails } from '@/services/api/pokemon-api';\n-\n-interface TeamBuilderProps {\n-  pokemonList: PokemonListItem[];\n-  initialPokemon?: Pokemon;\n-}\n-\n-export default function TeamBuilder({ \n-  pokemonList,\n-  initialPokemon\n-}: TeamBuilderProps) {\n-  // 선택된 포켓몬 (최대 6마리)\n-  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon[]>([]);\n-  \n-  // 초기 포켓몬이 제공되면 팀에 추가\n-  useEffect(() => {\n-    if (initialPokemon && !selectedPokemon.find(p => p.id === initialPokemon.id)) {\n-      setSelectedPokemon(prev => [...prev, initialPokemon]);\n-    }\n-  }, [initialPokemon]);\n-  \n-  // 포켓몬 추가\n-  const addPokemon = async (pokemon: PokemonListItem) => {\n-    if (selectedPokemon.length >= 6) return;\n-    \n-    try {\n-      // URL에서 ID 추출\n-      const url = pokemon.url;\n-      const parts = url.split('/');\n-      const id = parts[parts.length - 2];\n-      \n-      // 이미 선택된 포켓몬인지 확인\n-      if (selectedPokemon.find(p => p.id.toString() === id)) return;\n-      \n-      // 포켓몬 상세 정보 가져오기\n-      const details = await getPokemonDetails(id);\n-      setSelectedPokemon(prev => [...prev, details]);\n-    } catch (error) {\n-      console.error('Failed to add Pokemon:', error);\n-    }\n-  };\n-  \n-  // 포켓몬 제거\n-  const removePokemon = (id: number) => {\n-    setSelectedPokemon(prev => prev.filter(p => p.id !== id));\n-  };\n-  \n-  // 추천 요청 가능 여부 확인\n-  const canRequestRecommendations = selectedPokemon.length >= 2 && selectedPokemon.length <= 3;\n-  \n-  return (\n-    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n-      <div>\n-        <h2 className=\"text-xl font-semibold mb-4\">나의 포켓몬 팀</h2>\n-        <TeamDisplay \n-          team={selectedPokemon} \n-          onRemove={removePokemon} \n-        />\n-        \n-        {canRequestRecommendations && (\n-          <button\n-            className=\"mt-4 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded w-full\"\n-          >\n-            팀 추천 받기\n-          </button>\n-        )}\n-      </div>\n-      \n-      <div>\n-        <h2 className=\"text-xl font-semibold mb-4\">포켓몬 선택</h2>\n-        <PokemonSelector \n-          pokemonList={pokemonList} \n-          onSelect={addPokemon} \n-          disabled={selectedPokemon.length >= 6}\n-        />\n-      </div>\n-      \n-      {/* 추천 패널 (구현 예정) */}\n-      {canRequestRecommendations && (\n-        <div className=\"col-span-1 md:col-span-2 mt-6\">\n-          <RecommendationPanel \n-            selectedPokemon={selectedPokemon}\n-          />\n-        </div>\n-      )}\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743562270759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,17 @@\n   const [selectedPokemon, setSelectedPokemon] = useState<Pokemon[]>([]);\n   \n   // 초기 포켓몬이 제공되면 팀에 추가\n   useEffect(() => {\n-    if (initialPokemon && !selectedPokemon.find(p => p.id === initialPokemon.id)) {\n-      setSelectedPokemon(prev => [...prev, initialPokemon]);\n+    if (initialPokemon) {\n+      setSelectedPokemon(prev => {\n+        if (!prev.find(p => p.id === initialPokemon.id)) {\n+          return [...prev, initialPokemon];\n+        }\n+        return prev;\n+      });\n     }\n-  }, [initialPokemon, selectedPokemon]);\n+  }, [initialPokemon]);\n   \n   // 포켓몬 추가\n   const addPokemon = async (pokemon: PokemonListItem) => {\n     if (selectedPokemon.length >= 6) return;\n"
                },
                {
                    "date": 1743562321830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+// app/team-builder/components/TeamBuilder.tsx\n+'use client';\n+\n+import { Pokemon, PokemonListItem } from '@/types/pokemon';\n+import { useEffect, useState } from 'react';\n+\n+import PokemonSelector from './PokemonSelector';\n+import RecommendationPanel from './RecommendationPanel';\n+import TeamDisplay from './TeamDisplay';\n+import { getPokemonDetails } from '@/services/api/pokemon-api';\n+\n+interface TeamBuilderProps {\n+  pokemonList: PokemonListItem[];\n+  initialPokemon?: Pokemon;\n+}\n+\n+export default function TeamBuilder({ \n+  pokemonList,\n+  initialPokemon\n+}: TeamBuilderProps) {\n+  // 선택된 포켓몬 (최대 6마리)\n+  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon[]>([]);\n+  \n+  // 초기 포켓몬이 제공되면 팀에 추가\n+  useEffect(() => {\n+    if (initialPokemon) {\n+      setSelectedPokemon(prev => {\n+        if (!prev.find(p => p.id === initialPokemon.id)) {\n+          return [...prev, initialPokemon];\n+        }\n+        return prev;\n+      });\n+    }\n+  }, [initialPokemon]);\n+  \n+  // 포켓몬 추가\n+  const addPokemon = async (pokemon: PokemonListItem) => {\n+    if (selectedPokemon.length >= 6) return;\n+    \n+    try {\n+      // URL에서 ID 추출\n+      const url = pokemon.url;\n+      const parts = url.split('/');\n+      const id = parts[parts.length - 2];\n+      \n+      // 이미 선택된 포켓몬인지 확인\n+      if (selectedPokemon.find(p => p.id.toString() === id)) return;\n+      \n+      // 포켓몬 상세 정보 가져오기\n+      const details = await getPokemonDetails(id);\n+      setSelectedPokemon(prev => [...prev, details]);\n+    } catch (error) {\n+      console.error('Failed to add Pokemon:', error);\n+    }\n+  };\n+  \n+  // 포켓몬 제거\n+  const removePokemon = (id: number) => {\n+    setSelectedPokemon(prev => prev.filter(p => p.id !== id));\n+  };\n+  \n+  // 추천 요청 가능 여부 확인\n+  const canRequestRecommendations = selectedPokemon.length >= 2 && selectedPokemon.length <= 3;\n+  \n+  return (\n+    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n+      <div>\n+        <h2 className=\"text-xl font-semibold mb-4\">나의 포켓몬 팀</h2>\n+        <TeamDisplay \n+          team={selectedPokemon} \n+          onRemove={removePokemon} \n+        />\n+      </div>\n+      \n+      <div>\n+        <h2 className=\"text-xl font-semibold mb-4\">포켓몬 선택</h2>\n+        <PokemonSelector \n+          pokemonList={pokemonList} \n+          onSelect={addPokemon} \n+          disabled={selectedPokemon.length >= 6}\n+        />\n+      </div>\n+      \n+      {/* 추천 패널 */}\n+      {canRequestRecommendations && (\n+        <div className=\"col-span-1 md:col-span-2 mt-6\">\n+          <RecommendationPanel \n+            selectedPokemon={selectedPokemon}\n+          />\n+        </div>\n+      )}\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743562331363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,107 +90,5 @@\n         </div>\n       )}\n     </div>\n   );\n-}\n-// app/team-builder/components/TeamBuilder.tsx\n-'use client';\n-\n-import { Pokemon, PokemonListItem } from '@/types/pokemon';\n-import { useEffect, useState } from 'react';\n-\n-import PokemonSelector from './PokemonSelector';\n-import RecommendationPanel from './RecommendationPanel';\n-import TeamDisplay from './TeamDisplay';\n-import { getPokemonDetails } from '@/services/api/pokemon-api';\n-\n-interface TeamBuilderProps {\n-  pokemonList: PokemonListItem[];\n-  initialPokemon?: Pokemon;\n-}\n-\n-export default function TeamBuilder({ \n-  pokemonList,\n-  initialPokemon\n-}: TeamBuilderProps) {\n-  // 선택된 포켓몬 (최대 6마리)\n-  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon[]>([]);\n-  \n-  // 초기 포켓몬이 제공되면 팀에 추가\n-  useEffect(() => {\n-    if (initialPokemon) {\n-      setSelectedPokemon(prev => {\n-        if (!prev.find(p => p.id === initialPokemon.id)) {\n-          return [...prev, initialPokemon];\n-        }\n-        return prev;\n-      });\n-    }\n-  }, [initialPokemon]);\n-  \n-  // 포켓몬 추가\n-  const addPokemon = async (pokemon: PokemonListItem) => {\n-    if (selectedPokemon.length >= 6) return;\n-    \n-    try {\n-      // URL에서 ID 추출\n-      const url = pokemon.url;\n-      const parts = url.split('/');\n-      const id = parts[parts.length - 2];\n-      \n-      // 이미 선택된 포켓몬인지 확인\n-      if (selectedPokemon.find(p => p.id.toString() === id)) return;\n-      \n-      // 포켓몬 상세 정보 가져오기\n-      const details = await getPokemonDetails(id);\n-      setSelectedPokemon(prev => [...prev, details]);\n-    } catch (error) {\n-      console.error('Failed to add Pokemon:', error);\n-    }\n-  };\n-  \n-  // 포켓몬 제거\n-  const removePokemon = (id: number) => {\n-    setSelectedPokemon(prev => prev.filter(p => p.id !== id));\n-  };\n-  \n-  // 추천 요청 가능 여부 확인\n-  const canRequestRecommendations = selectedPokemon.length >= 2 && selectedPokemon.length <= 3;\n-  \n-  return (\n-    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n-      <div>\n-        <h2 className=\"text-xl font-semibold mb-4\">나의 포켓몬 팀</h2>\n-        <TeamDisplay \n-          team={selectedPokemon} \n-          onRemove={removePokemon} \n-        />\n-        \n-        {canRequestRecommendations && (\n-          <button\n-            className=\"mt-4 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded w-full\"\n-          >\n-            팀 추천 받기\n-          </button>\n-        )}\n-      </div>\n-      \n-      <div>\n-        <h2 className=\"text-xl font-semibold mb-4\">포켓몬 선택</h2>\n-        <PokemonSelector \n-          pokemonList={pokemonList} \n-          onSelect={addPokemon} \n-          disabled={selectedPokemon.length >= 6}\n-        />\n-      </div>\n-      \n-      {/* 추천 패널 (구현 예정) */}\n-      {canRequestRecommendations && (\n-        <div className=\"col-span-1 md:col-span-2 mt-6\">\n-          <RecommendationPanel \n-            selectedPokemon={selectedPokemon}\n-          />\n-        </div>\n-      )}\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743562429697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+// app/team-builder/components/TeamBuilder.tsx\n+'use client';\n+\n+import { Pokemon, PokemonListItem } from '@/types/pokemon';\n+import { useEffect, useState } from 'react';\n+\n+import PokemonSelector from './PokemonSelector';\n+import RecommendationPanel from './RecommendationPanel';\n+import TeamDisplay from './TeamDisplay';\n+import { getPokemonDetails } from '@/lib/pokemon-api';\n+\n+interface TeamBuilderProps {\n+  pokemonList: PokemonListItem[];\n+  initialPokemon?: Pokemon;\n+}\n+\n+export default function TeamBuilder({ \n+  pokemonList,\n+  initialPokemon\n+}: TeamBuilderProps) {\n+  // 선택된 포켓몬 (최대 6마리)\n+  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon[]>([]);\n+  \n+  // 초기 포켓몬이 제공되면 팀에 추가\n+  useEffect(() => {\n+    if (initialPokemon) {\n+      setSelectedPokemon(prev => {\n+        if (!prev.find(p => p.id === initialPokemon.id)) {\n+          return [...prev, initialPokemon];\n+        }\n+        return prev;\n+      });\n+    }\n+  }, [initialPokemon]);\n+  \n+  // 포켓몬 추가\n+  const addPokemon = async (pokemon: PokemonListItem) => {\n+    if (selectedPokemon.length >= 6) return;\n+    \n+    try {\n+      // URL에서 ID 추출\n+      const url = pokemon.url;\n+      const parts = url.split('/');\n+      const id = parts[parts.length - 2];\n+      \n+      // 이미 선택된 포켓몬인지 확인\n+      if (selectedPokemon.find(p => p.id.toString() === id)) return;\n+      \n+      // 포켓몬 상세 정보 가져오기\n+      const details = await getPokemonDetails(id);\n+      setSelectedPokemon(prev => [...prev, details]);\n+    } catch (error) {\n+      console.error('Failed to add Pokemon:', error);\n+    }\n+  };\n+  \n+  // 포켓몬 제거\n+  const removePokemon = (id: number) => {\n+    setSelectedPokemon(prev => prev.filter(p => p.id !== id));\n+  };\n+  \n+  // 추천 요청 가능 여부 확인\n+  const canRequestRecommendations = selectedPokemon.length >= 2 && selectedPokemon.length <= 3;\n+  \n+  return (\n+    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n+      <div>\n+        <h2 className=\"text-xl font-semibold mb-4\">나의 포켓몬 팀</h2>\n+        <TeamDisplay \n+          team={selectedPokemon} \n+          onRemove={removePokemon} \n+        />\n+      </div>\n+      \n+      <div>\n+        <h2 className=\"text-xl font-semibold mb-4\">포켓몬 선택</h2>\n+        <PokemonSelector \n+          pokemonList={pokemonList} \n+          onSelect={addPokemon} \n+          disabled={selectedPokemon.length >= 6}\n+        />\n+      </div>\n+      \n+      {/* 추천 패널 */}\n+      {canRequestRecommendations && (\n+        <div className=\"col-span-1 md:col-span-2 mt-6\">\n+          <RecommendationPanel \n+            selectedPokemon={selectedPokemon}\n+          />\n+        </div>\n+      )}\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743562436865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,99 +90,5 @@\n         </div>\n       )}\n     </div>\n   );\n-}\n-// app/team-builder/components/TeamBuilder.tsx\n-'use client';\n-\n-import { Pokemon, PokemonListItem } from '@/types/pokemon';\n-import { useEffect, useState } from 'react';\n-\n-import PokemonSelector from './PokemonSelector';\n-import RecommendationPanel from './RecommendationPanel';\n-import TeamDisplay from './TeamDisplay';\n-import { getPokemonDetails } from '@/services/api/pokemon-api';\n-\n-interface TeamBuilderProps {\n-  pokemonList: PokemonListItem[];\n-  initialPokemon?: Pokemon;\n-}\n-\n-export default function TeamBuilder({ \n-  pokemonList,\n-  initialPokemon\n-}: TeamBuilderProps) {\n-  // 선택된 포켓몬 (최대 6마리)\n-  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon[]>([]);\n-  \n-  // 초기 포켓몬이 제공되면 팀에 추가\n-  useEffect(() => {\n-    if (initialPokemon) {\n-      setSelectedPokemon(prev => {\n-        if (!prev.find(p => p.id === initialPokemon.id)) {\n-          return [...prev, initialPokemon];\n-        }\n-        return prev;\n-      });\n-    }\n-  }, [initialPokemon]);\n-  \n-  // 포켓몬 추가\n-  const addPokemon = async (pokemon: PokemonListItem) => {\n-    if (selectedPokemon.length >= 6) return;\n-    \n-    try {\n-      // URL에서 ID 추출\n-      const url = pokemon.url;\n-      const parts = url.split('/');\n-      const id = parts[parts.length - 2];\n-      \n-      // 이미 선택된 포켓몬인지 확인\n-      if (selectedPokemon.find(p => p.id.toString() === id)) return;\n-      \n-      // 포켓몬 상세 정보 가져오기\n-      const details = await getPokemonDetails(id);\n-      setSelectedPokemon(prev => [...prev, details]);\n-    } catch (error) {\n-      console.error('Failed to add Pokemon:', error);\n-    }\n-  };\n-  \n-  // 포켓몬 제거\n-  const removePokemon = (id: number) => {\n-    setSelectedPokemon(prev => prev.filter(p => p.id !== id));\n-  };\n-  \n-  // 추천 요청 가능 여부 확인\n-  const canRequestRecommendations = selectedPokemon.length >= 2 && selectedPokemon.length <= 3;\n-  \n-  return (\n-    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n-      <div>\n-        <h2 className=\"text-xl font-semibold mb-4\">나의 포켓몬 팀</h2>\n-        <TeamDisplay \n-          team={selectedPokemon} \n-          onRemove={removePokemon} \n-        />\n-      </div>\n-      \n-      <div>\n-        <h2 className=\"text-xl font-semibold mb-4\">포켓몬 선택</h2>\n-        <PokemonSelector \n-          pokemonList={pokemonList} \n-          onSelect={addPokemon} \n-          disabled={selectedPokemon.length >= 6}\n-        />\n-      </div>\n-      \n-      {/* 추천 패널 */}\n-      {canRequestRecommendations && (\n-        <div className=\"col-span-1 md:col-span-2 mt-6\">\n-          <RecommendationPanel \n-            selectedPokemon={selectedPokemon}\n-          />\n-        </div>\n-      )}\n-    </div>\n-  );\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1743561804810,
            "name": "Commit-0",
            "content": "// app/team-builder/components/TeamBuilder.tsx\n'use client';\n\nimport { Pokemon, PokemonListItem } from '@/types/pokemon';\nimport { useEffect, useState } from 'react';\n\nimport PokemonSelector from './PokemonSelector';\nimport RecommendationPanel from './RecommendationPanel';\nimport TeamDisplay from './TeamDisplay';\nimport { getPokemonDetails } from '@/services/api/pokemon-api';\n\ninterface TeamBuilderProps {\n  pokemonList: PokemonListItem[];\n  initialPokemon?: Pokemon;\n}\n\nexport default function TeamBuilder({ \n  pokemonList,\n  initialPokemon\n}: TeamBuilderProps) {\n  // 선택된 포켓몬 (최대 6마리)\n  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon[]>([]);\n  \n  // 초기 포켓몬이 제공되면 팀에 추가\n  useEffect(() => {\n    if (initialPokemon && !selectedPokemon.find(p => p.id === initialPokemon.id)) {\n      setSelectedPokemon(prev => [...prev, initialPokemon]);\n    }\n  }, [initialPokemon]);\n  \n  // 포켓몬 추가\n  const addPokemon = async (pokemon: PokemonListItem) => {\n    if (selectedPokemon.length >= 6) return;\n    \n    try {\n      // URL에서 ID 추출\n      const url = pokemon.url;\n      const parts = url.split('/');\n      const id = parts[parts.length - 2];\n      \n      // 이미 선택된 포켓몬인지 확인\n      if (selectedPokemon.find(p => p.id.toString() === id)) return;\n      \n      // 포켓몬 상세 정보 가져오기\n      const details = await getPokemonDetails(id);\n      setSelectedPokemon(prev => [...prev, details]);\n    } catch (error) {\n      console.error('Failed to add Pokemon:', error);\n    }\n  };\n  \n  // 포켓몬 제거\n  const removePokemon = (id: number) => {\n    setSelectedPokemon(prev => prev.filter(p => p.id !== id));\n  };\n  \n  // 추천 요청 가능 여부 확인\n  const canRequestRecommendations = selectedPokemon.length >= 2 && selectedPokemon.length <= 3;\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">나의 포켓몬 팀</h2>\n        <TeamDisplay \n          team={selectedPokemon} \n          onRemove={removePokemon} \n        />\n        \n        {canRequestRecommendations && (\n          <button\n            className=\"mt-4 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded w-full\"\n          >\n            팀 추천 받기\n          </button>\n        )}\n      </div>\n      \n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">포켓몬 선택</h2>\n        <PokemonSelector \n          pokemonList={pokemonList} \n          onSelect={addPokemon} \n          disabled={selectedPokemon.length >= 6}\n        />\n      </div>\n      \n      {/* 추천 패널 (구현 예정) */}\n      {canRequestRecommendations && (\n        <div className=\"col-span-1 md:col-span-2 mt-6\">\n          <RecommendationPanel \n            selectedPokemon={selectedPokemon}\n          />\n        </div>\n      )}\n    </div>\n  );\n}"
        }
    ]
}